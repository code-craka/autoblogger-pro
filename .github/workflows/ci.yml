name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '22'
  PHP_VERSION: '8.2'

jobs:
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run ESLint
      run: pnpm lint

    - name: Run Prettier check
      run: pnpm format:check

    - name: Type check
      run: pnpm type-check

    - name: Run unit tests
      run: pnpm test:coverage

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Build application
      run: pnpm build

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: autoblogger_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, redis, pgsql, pdo_pgsql
        coverage: xdebug

    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Copy environment file
      run: cp .env.example .env.testing

    - name: Generate application key
      run: php artisan key:generate --env=testing

    - name: Run database migrations
      run: php artisan migrate --env=testing --force

    - name: Install Passport keys
      run: php artisan passport:install --env=testing

    - name: Run PHPStan
      run: vendor/bin/phpstan analyse --memory-limit=2G

    - name: Run PHP CS Fixer
      run: vendor/bin/php-cs-fixer fix --dry-run --diff

    - name: Run PHPUnit tests
      run: php artisan test --coverage --coverage-clover=coverage.xml

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: autoblogger_integration
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, redis, pgsql, pdo_pgsql

    - name: Install backend dependencies
      working-directory: ./backend
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Setup backend environment
      working-directory: ./backend
      run: |
        cp .env.example .env
        php artisan key:generate
        php artisan migrate --force
        php artisan passport:install

    - name: Start backend server
      working-directory: ./backend
      run: php artisan serve --host=0.0.0.0 --port=8000 &

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: pnpm install --frozen-lockfile

    - name: Run integration tests
      working-directory: ./frontend
      run: pnpm test:integration
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, security-scan, integration-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    environment:
      name: staging
      url: https://staging.autoblogger-pro.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # For example: deploy to AWS, Azure, or other cloud providers

    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add your smoke test commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, security-scan, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: production
      url: https://autoblogger-pro.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here

    - name: Run smoke tests
      run: |
        echo "Running smoke tests on production..."
        # Add your smoke test commands here

    - name: Notify team
      if: always()
      run: |
        echo "Notifying team of deployment status..."
        # Add notification logic (Slack, email, etc.)
